name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        pip install -r requirements.txt
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics --exclude=venv,.pytest_cache,.git,scripts,alembic

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: user
          POSTGRES_DB: images_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      rabbitmq:
        image: rabbitmq:3.11-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 30s
          --health-timeout 30s
          --health-retries 3
        ports:
          - 5672:5672
          - 15672:15672
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Set up environment
      run: |
        mkdir -p storage/{original,thumbs/{100x100,300x300,1200x1200}}
    - name: Run database migrations
      env:
        DATABASE_URL: postgresql+asyncpg://user:password@localhost:5432/images_db
        RABBITMQ_URL: amqp://guest:guest@localhost:5672/
        STORAGE_PATH: ./storage
      run: |
        alembic upgrade head
    - name: Run unit tests
      env:
        DATABASE_URL: postgresql+asyncpg://user:password@localhost:5432/images_db
        RABBITMQ_URL: amqp://guest:guest@localhost:5672/
        STORAGE_PATH: ./storage
      run: |
        pytest tests/test_api.py tests/test_file_endpoints.py -v --cov=app --cov-report=xml

  docker-build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - uses: actions/checkout@v4
    - name: Build Docker image
      run: |
        docker build -t image-processing-api .
    - name: Test Docker image
      run: |
        docker run --rm image-processing-api python -c "import app.main; print('Docker build successful')"